From 91c554119a126f4476b2675a3729e8890a2b2e4a Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Wed, 19 Nov 2014 21:21:23 +0100
Subject: Make `FT_Bitmap_Convert' correctly handle negative `pitch' values.
 CVE-2014-9665-fixup

* src/base/ftbitmap.c (FT_Bitmap_Convert): Always use positive value
for the pitch while copying data.
Correctly set pitch sign in target bitmap.

(cherry picked from commit df485774fbbc7fd7dc9d3b278846f454654ad5df)
[benh: Backported to 2.4.2:
 - Adjust context
 - We don't have FT_PIXEL_MODE_BGRA so drop related changes]
---
 src/base/ftbitmap.c | 63 +++++++++++++++++++++-----------------
 1 file changed, 35 insertions(+), 28 deletions(-)

--- a/src/base/ftbitmap.c
+++ b/src/base/ftbitmap.c
@@ -380,6 +380,8 @@
     FT_Error   error = FT_Err_Ok;
     FT_Memory  memory;
 
+    FT_Int  source_pitch, target_pitch;
+
 
     if ( !library )
       return FT_Err_Invalid_Library_Handle;
@@ -395,13 +397,15 @@
     case FT_PIXEL_MODE_LCD:
     case FT_PIXEL_MODE_LCD_V:
       {
-        FT_Int   pad;
+        FT_Int   pad, old_target_pitch;
         FT_Long  old_size;
 
 
-        old_size = target->rows * target->pitch;
-        if ( old_size < 0 )
-          old_size = -old_size;
+        old_target_pitch = target->pitch;
+        if ( old_target_pitch < 0 )
+          old_target_pitch = -old_target_pitch;
+
+        old_size = target->rows * old_target_pitch;
 
         target->pixel_mode = FT_PIXEL_MODE_GRAY;
         target->rows       = source->rows;
@@ -415,16 +419,18 @@
             pad = alignment - pad;
         }
 
-        target->pitch = source->width + pad;
+        target_pitch = source->width + pad;
 
-        if ( target->pitch > 0                                     &&
-             (FT_ULong)target->rows > FT_ULONG_MAX / target->pitch )
+        if ( target_pitch > 0                                     &&
+             (FT_ULong)target->rows > FT_ULONG_MAX / target_pitch )
           return FT_Err_Invalid_Argument;
 
-        if ( target->rows * target->pitch > old_size             &&
+        if ( target->rows * target_pitch > old_size               &&
              FT_QREALLOC( target->buffer,
-                          old_size, target->rows * target->pitch ) )
+                          old_size, target->rows * target_pitch ) )
           return error;
+
+        target->pitch = target->pitch < 0 ? -target_pitch : target_pitch;
       }
       break;
 
@@ -432,6 +438,10 @@
       error = FT_Err_Invalid_Argument;
     }
 
+    source_pitch = source->pitch;
+    if ( source_pitch < 0 )
+      source_pitch = -source_pitch;
+
     switch ( source->pixel_mode )
     {
     case FT_PIXEL_MODE_MONO:
@@ -484,8 +494,8 @@
             }
           }
 
-          s += source->pitch;
-          t += target->pitch;
+          s += source_pitch;
+          t += target_pitch;
         }
       }
       break;
@@ -495,11 +505,9 @@
     case FT_PIXEL_MODE_LCD:
     case FT_PIXEL_MODE_LCD_V:
       {
-        FT_Int    width   = source->width;
-        FT_Byte*  s       = source->buffer;
-        FT_Byte*  t       = target->buffer;
-        FT_Int    s_pitch = source->pitch;
-        FT_Int    t_pitch = target->pitch;
+        FT_Int    width = source->width;
+        FT_Byte*  s     = source->buffer;
+        FT_Byte*  t     = target->buffer;
         FT_Int    i;
 
 
@@ -509,8 +517,8 @@
         {
           FT_ARRAY_COPY( t, s, width );
 
-          s += s_pitch;
-          t += t_pitch;
+          s += source_pitch;
+          t += target_pitch;
         }
       }
       break;
@@ -561,8 +569,8 @@
             }
           }
 
-          s += source->pitch;
-          t += target->pitch;
+          s += source_pitch;
+          t += target_pitch;
         }
       }
       break;
@@ -600,8 +608,8 @@
           if ( source->width & 1 )
             tt[0] = (FT_Byte)( ( ss[0] & 0xF0 ) >> 4 );
 
-          s += source->pitch;
-          t += target->pitch;
+          s += source_pitch;
+          t += target_pitch;
         }
       }
       break;
